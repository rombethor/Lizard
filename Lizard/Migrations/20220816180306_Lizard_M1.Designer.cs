// <auto-generated />
using System;
using Lizard;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Lizard.Migrations
{
    [DbContext(typeof(LizardDbContext))]
    [Migration("20220816180306_Lizard_M1")]
    partial class Lizard_M1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Lizard.Entities.ExceptionLogEntry", b =>
                {
                    b.Property<long>("LogEntryID")
                        .HasColumnType("bigint");

                    b.HasKey("LogEntryID");

                    b.ToTable("ExceptionLogEntry", "lizard");
                });

            modelBuilder.Entity("Lizard.Entities.HttpRequestLogEntry", b =>
                {
                    b.Property<long>("LogEntryID")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Headers")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<string>("Uri")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("LogEntryID");

                    b.ToTable("HttpRequestLogEntry", "lizard");
                });

            modelBuilder.Entity("Lizard.Entities.HttpResponseLogEntry", b =>
                {
                    b.Property<long>("LogEntryID")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Headers")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int>("StatusCode")
                        .HasColumnType("int");

                    b.HasKey("LogEntryID");

                    b.ToTable("HttpResponseLogEntry", "lizard");
                });

            modelBuilder.Entity("Lizard.Entities.InnerExceptionReference", b =>
                {
                    b.Property<long>("InnerExceptionLogEntryID")
                        .HasColumnType("bigint");

                    b.Property<long>("OuterExceptionLogEntryID")
                        .HasColumnType("bigint");

                    b.HasKey("InnerExceptionLogEntryID");

                    b.HasIndex("OuterExceptionLogEntryID")
                        .IsUnique();

                    b.ToTable("InnerExceptionLogEntry", "lizard");
                });

            modelBuilder.Entity("Lizard.Entities.LogEntry", b =>
                {
                    b.Property<long>("LogEntryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LogEntryID"), -9223372036854775808L, 1);

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<byte[]>("SHA256")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varbinary(32)");

                    b.Property<long>("SourceID")
                        .HasColumnType("bigint");

                    b.HasKey("LogEntryID");

                    b.HasIndex("SourceID");

                    b.ToTable("LogEntry", "lizard");
                });

            modelBuilder.Entity("Lizard.Entities.Occurrence", b =>
                {
                    b.Property<long>("OccurrenceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("OccurrenceID"), 1L, 1);

                    b.Property<long>("LogEntryID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Occurred")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Written")
                        .HasColumnType("datetime2");

                    b.HasKey("OccurrenceID");

                    b.HasIndex("LogEntryID");

                    b.ToTable("Occurrence", "lizard");
                });

            modelBuilder.Entity("Lizard.Entities.Source", b =>
                {
                    b.Property<long>("SourceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SourceID"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Version")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("SourceID");

                    b.ToTable("Source", "lizard");
                });

            modelBuilder.Entity("Lizard.Entities.StackTrace", b =>
                {
                    b.Property<long>("ExceptionLogEntryID")
                        .HasColumnType("bigint");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(5000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TargetSite")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ExceptionLogEntryID");

                    b.ToTable("StackTrace", "lizard");
                });

            modelBuilder.Entity("Lizard.Entities.ExceptionLogEntry", b =>
                {
                    b.HasOne("Lizard.Entities.LogEntry", "LogEntry")
                        .WithOne("Exception")
                        .HasForeignKey("Lizard.Entities.ExceptionLogEntry", "LogEntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogEntry");
                });

            modelBuilder.Entity("Lizard.Entities.HttpRequestLogEntry", b =>
                {
                    b.HasOne("Lizard.Entities.LogEntry", "LogEntry")
                        .WithOne("HttpRequest")
                        .HasForeignKey("Lizard.Entities.HttpRequestLogEntry", "LogEntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogEntry");
                });

            modelBuilder.Entity("Lizard.Entities.HttpResponseLogEntry", b =>
                {
                    b.HasOne("Lizard.Entities.HttpRequestLogEntry", "Request")
                        .WithOne("Response")
                        .HasForeignKey("Lizard.Entities.HttpResponseLogEntry", "LogEntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Lizard.Entities.InnerExceptionReference", b =>
                {
                    b.HasOne("Lizard.Entities.ExceptionLogEntry", "InnerExceptionLogEntry")
                        .WithOne("OuterExceptionLogEntry")
                        .HasForeignKey("Lizard.Entities.InnerExceptionReference", "InnerExceptionLogEntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lizard.Entities.ExceptionLogEntry", "OuterExceptionLogEntry")
                        .WithOne("InnerExceptionLogEntry")
                        .HasForeignKey("Lizard.Entities.InnerExceptionReference", "OuterExceptionLogEntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InnerExceptionLogEntry");

                    b.Navigation("OuterExceptionLogEntry");
                });

            modelBuilder.Entity("Lizard.Entities.LogEntry", b =>
                {
                    b.HasOne("Lizard.Entities.Source", "Source")
                        .WithMany()
                        .HasForeignKey("SourceID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Source");
                });

            modelBuilder.Entity("Lizard.Entities.Occurrence", b =>
                {
                    b.HasOne("Lizard.Entities.LogEntry", "LogEntry")
                        .WithMany("Occurrences")
                        .HasForeignKey("LogEntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LogEntry");
                });

            modelBuilder.Entity("Lizard.Entities.StackTrace", b =>
                {
                    b.HasOne("Lizard.Entities.ExceptionLogEntry", "ExceptionLogEntry")
                        .WithOne("StackTrace")
                        .HasForeignKey("Lizard.Entities.StackTrace", "ExceptionLogEntryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ExceptionLogEntry");
                });

            modelBuilder.Entity("Lizard.Entities.ExceptionLogEntry", b =>
                {
                    b.Navigation("InnerExceptionLogEntry");

                    b.Navigation("OuterExceptionLogEntry");

                    b.Navigation("StackTrace");
                });

            modelBuilder.Entity("Lizard.Entities.HttpRequestLogEntry", b =>
                {
                    b.Navigation("Response");
                });

            modelBuilder.Entity("Lizard.Entities.LogEntry", b =>
                {
                    b.Navigation("Exception");

                    b.Navigation("HttpRequest");

                    b.Navigation("Occurrences");
                });
#pragma warning restore 612, 618
        }
    }
}
